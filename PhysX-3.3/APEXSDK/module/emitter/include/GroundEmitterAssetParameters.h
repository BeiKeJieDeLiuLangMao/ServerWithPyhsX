/*
 * Copyright (c) 2008-2015, NVIDIA CORPORATION.  All rights reserved.
 *
 * NVIDIA CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA CORPORATION is strictly prohibited.
 */


// This file was generated by NxParameterized/scripts/GenParameterized.pl
// Created: 2015.10.22 17:26:24

#ifndef HEADER_GroundEmitterAssetParameters_h
#define HEADER_GroundEmitterAssetParameters_h

#include "NxParametersTypes.h"

#ifndef NX_PARAMETERIZED_ONLY_LAYOUTS
#include "NxParameterized.h"
#include "NxParameters.h"
#include "NxParameterizedTraits.h"
#include "NxTraitsInternal.h"
#endif

namespace physx
{
namespace apex
{
namespace emitter
{

#pragma warning(push)
#pragma warning(disable: 4324) // structure was padded due to __declspec(align())

namespace GroundEmitterAssetParametersNS
{

struct rangeStructF32_Type;
struct rangeStructVec3_Type;
struct emitterLodParamDesc_Type;
struct materialFactoryMapping_Type;

struct materialFactoryMapping_DynamicArray1D_Type
{
	materialFactoryMapping_Type* buf;
	bool isAllocated;
	physx::PxI32 elementSize;
	physx::PxI32 arraySizes[1];
};

struct emitterLodParamDesc_Type
{
	physx::PxU32 version;
	physx::PxF32 maxDistance;
	physx::PxF32 distanceWeight;
	physx::PxF32 speedWeight;
	physx::PxF32 lifeWeight;
	physx::PxF32 separationWeight;
	physx::PxF32 bias;
};
struct rangeStructVec3_Type
{
	physx::PxVec3 min;
	physx::PxVec3 max;
};
struct rangeStructF32_Type
{
	physx::PxF32 min;
	physx::PxF32 max;
};
struct materialFactoryMapping_Type
{
	NxParameterized::Interface* iofxAssetName;
	NxParameterized::Interface* iosAssetName;
	NxParameterized::DummyStringStruct physMatName;
	physx::PxF32 weight;
	physx::PxF32 maxSlopeAngle;
	emitterLodParamDesc_Type lodParamDesc;
};

struct ParametersStruct
{

	rangeStructF32_Type densityRange;
	rangeStructVec3_Type velocityRange;
	rangeStructF32_Type lifetimeRange;
	physx::PxF32 radius;
	physx::PxF32 raycastHeight;
	physx::PxF32 spawnHeight;
	physx::PxU32 maxRaycastsPerFrame;
	NxParameterized::DummyStringStruct raycastCollisionGroupMaskName;
	materialFactoryMapping_DynamicArray1D_Type materialFactoryMapList;

};

static const physx::PxU32 checksum[] = { 0xd938a0f8, 0xcd08f7b0, 0xfebdd54f, 0xdce00ecc, };

} // namespace GroundEmitterAssetParametersNS

#ifndef NX_PARAMETERIZED_ONLY_LAYOUTS
class GroundEmitterAssetParameters : public NxParameterized::NxParameters, public GroundEmitterAssetParametersNS::ParametersStruct
{
public:
	GroundEmitterAssetParameters(NxParameterized::Traits* traits, void* buf = 0, PxI32* refCount = 0);

	virtual ~GroundEmitterAssetParameters();

	virtual void destroy();

	static const char* staticClassName(void)
	{
		return("GroundEmitterAssetParameters");
	}

	const char* className(void) const
	{
		return(staticClassName());
	}

	static const physx::PxU32 ClassVersion = ((physx::PxU32)0 << 16) + (physx::PxU32)0;

	static physx::PxU32 staticVersion(void)
	{
		return ClassVersion;
	}

	physx::PxU32 version(void) const
	{
		return(staticVersion());
	}

	static const physx::PxU32 ClassAlignment = 8;

	static const physx::PxU32* staticChecksum(physx::PxU32& bits)
	{
		bits = 8 * sizeof(GroundEmitterAssetParametersNS::checksum);
		return GroundEmitterAssetParametersNS::checksum;
	}

	static void freeParameterDefinitionTable(NxParameterized::Traits* traits);

	const physx::PxU32* checksum(physx::PxU32& bits) const
	{
		return staticChecksum(bits);
	}

	const GroundEmitterAssetParametersNS::ParametersStruct& parameters(void) const
	{
		GroundEmitterAssetParameters* tmpThis = const_cast<GroundEmitterAssetParameters*>(this);
		return *(static_cast<GroundEmitterAssetParametersNS::ParametersStruct*>(tmpThis));
	}

	GroundEmitterAssetParametersNS::ParametersStruct& parameters(void)
	{
		return *(static_cast<GroundEmitterAssetParametersNS::ParametersStruct*>(this));
	}

	virtual NxParameterized::ErrorType getParameterHandle(const char* long_name, NxParameterized::Handle& handle) const;
	virtual NxParameterized::ErrorType getParameterHandle(const char* long_name, NxParameterized::Handle& handle);

	void initDefaults(void);

protected:

	virtual const NxParameterized::DefinitionImpl* getParameterDefinitionTree(void);
	virtual const NxParameterized::DefinitionImpl* getParameterDefinitionTree(void) const;


	virtual void getVarPtr(const NxParameterized::Handle& handle, void*& ptr, size_t& offset) const;

private:

	void buildTree(void);
	void initDynamicArrays(void);
	void initStrings(void);
	void initReferences(void);
	void freeDynamicArrays(void);
	void freeStrings(void);
	void freeReferences(void);

	static bool mBuiltFlag;
	static NxParameterized::MutexType mBuiltFlagMutex;
};

class GroundEmitterAssetParametersFactory : public NxParameterized::Factory
{
	static const char* const vptr;

public:
	virtual NxParameterized::Interface* create(NxParameterized::Traits* paramTraits)
	{
		// placement new on this class using mParameterizedTraits

		void* newPtr = paramTraits->alloc(sizeof(GroundEmitterAssetParameters), GroundEmitterAssetParameters::ClassAlignment);
		if (!NxParameterized::IsAligned(newPtr, GroundEmitterAssetParameters::ClassAlignment))
		{
			NX_PARAM_TRAITS_WARNING(paramTraits, "Unaligned memory allocation for class GroundEmitterAssetParameters");
			paramTraits->free(newPtr);
			return 0;
		}

		memset(newPtr, 0, sizeof(GroundEmitterAssetParameters)); // always initialize memory allocated to zero for default values
		return NX_PARAM_PLACEMENT_NEW(newPtr, GroundEmitterAssetParameters)(paramTraits);
	}

	virtual NxParameterized::Interface* finish(NxParameterized::Traits* paramTraits, void* bufObj, void* bufStart, physx::PxI32* refCount)
	{
		if (!NxParameterized::IsAligned(bufObj, GroundEmitterAssetParameters::ClassAlignment)
		        || !NxParameterized::IsAligned(bufStart, GroundEmitterAssetParameters::ClassAlignment))
		{
			NX_PARAM_TRAITS_WARNING(paramTraits, "Unaligned memory allocation for class GroundEmitterAssetParameters");
			return 0;
		}

		// Init NxParameters-part
		// We used to call empty constructor of GroundEmitterAssetParameters here
		// but it may call default constructors of members and spoil the data
		NX_PARAM_PLACEMENT_NEW(bufObj, NxParameterized::NxParameters)(paramTraits, bufStart, refCount);

		// Init vtable (everything else is already initialized)
		*(const char**)bufObj = vptr;

		return (GroundEmitterAssetParameters*)bufObj;
	}

	virtual const char* getClassName()
	{
		return (GroundEmitterAssetParameters::staticClassName());
	}

	virtual physx::PxU32 getVersion()
	{
		return (GroundEmitterAssetParameters::staticVersion());
	}

	virtual physx::PxU32 getAlignment()
	{
		return (GroundEmitterAssetParameters::ClassAlignment);
	}

	virtual const physx::PxU32* getChecksum(physx::PxU32& bits)
	{
		return (GroundEmitterAssetParameters::staticChecksum(bits));
	}
};
#endif // NX_PARAMETERIZED_ONLY_LAYOUTS

} // namespace emitter
} // namespace apex
} // namespace physx

#pragma warning(pop)

#endif
