// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto

#ifndef PROTOBUF_Scene_2eproto__INCLUDED
#define PROTOBUF_Scene_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace killer {
namespace proto {
class U3DPhysxBox;
class U3DPhysxBoxDefaultTypeInternal;
extern U3DPhysxBoxDefaultTypeInternal _U3DPhysxBox_default_instance_;
class U3DPhysxCapsule;
class U3DPhysxCapsuleDefaultTypeInternal;
extern U3DPhysxCapsuleDefaultTypeInternal _U3DPhysxCapsule_default_instance_;
class U3DPhysxMesh;
class U3DPhysxMeshDefaultTypeInternal;
extern U3DPhysxMeshDefaultTypeInternal _U3DPhysxMesh_default_instance_;
class U3DPhysxScene;
class U3DPhysxSceneDefaultTypeInternal;
extern U3DPhysxSceneDefaultTypeInternal _U3DPhysxScene_default_instance_;
class U3DPhysxSphere;
class U3DPhysxSphereDefaultTypeInternal;
extern U3DPhysxSphereDefaultTypeInternal _U3DPhysxSphere_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector4;
class Vector4DefaultTypeInternal;
extern Vector4DefaultTypeInternal _Vector4_default_instance_;
}  // namespace proto
}  // namespace killer

namespace killer {
namespace proto {

namespace protobuf_Scene_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Scene_2eproto

enum ColliderType {
  BOX = 1,
  SPHERE = 2,
  CAPSULE = 3,
  MESH = 4
};
bool ColliderType_IsValid(int value);
const ColliderType ColliderType_MIN = BOX;
const ColliderType ColliderType_MAX = MESH;
const int ColliderType_ARRAYSIZE = ColliderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColliderType_descriptor();
inline const ::std::string& ColliderType_Name(ColliderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColliderType_descriptor(), value);
}
inline bool ColliderType_Parse(
    const ::std::string& name, ColliderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColliderType>(
    ColliderType_descriptor(), name, value);
}
// ===================================================================

class Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:killer.proto.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  inline Vector3* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3 [default = 0];
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:killer.proto.Vector3)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct  protobuf_Scene_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vector4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:killer.proto.Vector4) */ {
 public:
  Vector4();
  virtual ~Vector4();

  Vector4(const Vector4& from);

  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector4& default_instance();

  static inline const Vector4* internal_default_instance() {
    return reinterpret_cast<const Vector4*>(
               &_Vector4_default_instance_);
  }

  void Swap(Vector4* other);

  // implements Message ----------------------------------------------

  inline Vector4* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector4* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector4& from);
  void MergeFrom(const Vector4& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3 [default = 0];
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double w = 4 [default = 0];
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 4;
  double w() const;
  void set_w(double value);

  // @@protoc_insertion_point(class_scope:killer.proto.Vector4)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_w();
  void clear_has_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double w_;
  friend struct  protobuf_Scene_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class U3DPhysxScene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:killer.proto.U3DPhysxScene) */ {
 public:
  U3DPhysxScene();
  virtual ~U3DPhysxScene();

  U3DPhysxScene(const U3DPhysxScene& from);

  inline U3DPhysxScene& operator=(const U3DPhysxScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const U3DPhysxScene& default_instance();

  static inline const U3DPhysxScene* internal_default_instance() {
    return reinterpret_cast<const U3DPhysxScene*>(
               &_U3DPhysxScene_default_instance_);
  }

  void Swap(U3DPhysxScene* other);

  // implements Message ----------------------------------------------

  inline U3DPhysxScene* New() const PROTOBUF_FINAL { return New(NULL); }

  U3DPhysxScene* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const U3DPhysxScene& from);
  void MergeFrom(const U3DPhysxScene& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(U3DPhysxScene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  int box_collider_size() const;
  void clear_box_collider();
  static const int kBoxColliderFieldNumber = 3;
  const ::killer::proto::U3DPhysxBox& box_collider(int index) const;
  ::killer::proto::U3DPhysxBox* mutable_box_collider(int index);
  ::killer::proto::U3DPhysxBox* add_box_collider();
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >*
      mutable_box_collider();
  const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >&
      box_collider() const;

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  int sphere_collider_size() const;
  void clear_sphere_collider();
  static const int kSphereColliderFieldNumber = 4;
  const ::killer::proto::U3DPhysxSphere& sphere_collider(int index) const;
  ::killer::proto::U3DPhysxSphere* mutable_sphere_collider(int index);
  ::killer::proto::U3DPhysxSphere* add_sphere_collider();
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >*
      mutable_sphere_collider();
  const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >&
      sphere_collider() const;

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  int capsule_collider_size() const;
  void clear_capsule_collider();
  static const int kCapsuleColliderFieldNumber = 5;
  const ::killer::proto::U3DPhysxCapsule& capsule_collider(int index) const;
  ::killer::proto::U3DPhysxCapsule* mutable_capsule_collider(int index);
  ::killer::proto::U3DPhysxCapsule* add_capsule_collider();
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >*
      mutable_capsule_collider();
  const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >&
      capsule_collider() const;

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  int mesh_collider_size() const;
  void clear_mesh_collider();
  static const int kMeshColliderFieldNumber = 6;
  const ::killer::proto::U3DPhysxMesh& mesh_collider(int index) const;
  ::killer::proto::U3DPhysxMesh* mutable_mesh_collider(int index);
  ::killer::proto::U3DPhysxMesh* add_mesh_collider();
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >*
      mutable_mesh_collider();
  const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >&
      mesh_collider() const;

  // optional string scene_name = 2;
  bool has_scene_name() const;
  void clear_scene_name();
  static const int kSceneNameFieldNumber = 2;
  const ::std::string& scene_name() const;
  void set_scene_name(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_name(::std::string&& value);
  #endif
  void set_scene_name(const char* value);
  void set_scene_name(const char* value, size_t size);
  ::std::string* mutable_scene_name();
  ::std::string* release_scene_name();
  void set_allocated_scene_name(::std::string* scene_name);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:killer.proto.U3DPhysxScene)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_scene_name();
  void clear_has_scene_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox > box_collider_;
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere > sphere_collider_;
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule > capsule_collider_;
  ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh > mesh_collider_;
  ::google::protobuf::internal::ArenaStringPtr scene_name_;
  ::google::protobuf::int32 id_;
  friend struct  protobuf_Scene_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class U3DPhysxSphere : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:killer.proto.U3DPhysxSphere) */ {
 public:
  U3DPhysxSphere();
  virtual ~U3DPhysxSphere();

  U3DPhysxSphere(const U3DPhysxSphere& from);

  inline U3DPhysxSphere& operator=(const U3DPhysxSphere& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const U3DPhysxSphere& default_instance();

  static inline const U3DPhysxSphere* internal_default_instance() {
    return reinterpret_cast<const U3DPhysxSphere*>(
               &_U3DPhysxSphere_default_instance_);
  }

  void Swap(U3DPhysxSphere* other);

  // implements Message ----------------------------------------------

  inline U3DPhysxSphere* New() const PROTOBUF_FINAL { return New(NULL); }

  U3DPhysxSphere* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const U3DPhysxSphere& from);
  void MergeFrom(const U3DPhysxSphere& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(U3DPhysxSphere* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .killer.proto.Vector3 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::killer::proto::Vector3& pos() const;
  ::killer::proto::Vector3* mutable_pos();
  ::killer::proto::Vector3* release_pos();
  void set_allocated_pos(::killer::proto::Vector3* pos);

  // optional .killer.proto.Vector4 rotation = 5;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  const ::killer::proto::Vector4& rotation() const;
  ::killer::proto::Vector4* mutable_rotation();
  ::killer::proto::Vector4* release_rotation();
  void set_allocated_rotation(::killer::proto::Vector4* rotation);

  // optional double radius = 4;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  double radius() const;
  void set_radius(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .killer.proto.ColliderType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::killer::proto::ColliderType type() const;
  void set_type(::killer::proto::ColliderType value);

  // @@protoc_insertion_point(class_scope:killer.proto.U3DPhysxSphere)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_pos();
  void clear_has_pos();
  void set_has_radius();
  void clear_has_radius();
  void set_has_rotation();
  void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::killer::proto::Vector3* pos_;
  ::killer::proto::Vector4* rotation_;
  double radius_;
  ::google::protobuf::int32 id_;
  int type_;
  friend struct  protobuf_Scene_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class U3DPhysxBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:killer.proto.U3DPhysxBox) */ {
 public:
  U3DPhysxBox();
  virtual ~U3DPhysxBox();

  U3DPhysxBox(const U3DPhysxBox& from);

  inline U3DPhysxBox& operator=(const U3DPhysxBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const U3DPhysxBox& default_instance();

  static inline const U3DPhysxBox* internal_default_instance() {
    return reinterpret_cast<const U3DPhysxBox*>(
               &_U3DPhysxBox_default_instance_);
  }

  void Swap(U3DPhysxBox* other);

  // implements Message ----------------------------------------------

  inline U3DPhysxBox* New() const PROTOBUF_FINAL { return New(NULL); }

  U3DPhysxBox* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const U3DPhysxBox& from);
  void MergeFrom(const U3DPhysxBox& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(U3DPhysxBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .killer.proto.Vector3 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::killer::proto::Vector3& pos() const;
  ::killer::proto::Vector3* mutable_pos();
  ::killer::proto::Vector3* release_pos();
  void set_allocated_pos(::killer::proto::Vector3* pos);

  // optional .killer.proto.Vector4 rotation = 7;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 7;
  const ::killer::proto::Vector4& rotation() const;
  ::killer::proto::Vector4* mutable_rotation();
  ::killer::proto::Vector4* release_rotation();
  void set_allocated_rotation(::killer::proto::Vector4* rotation);

  // optional double x_extents = 4;
  bool has_x_extents() const;
  void clear_x_extents();
  static const int kXExtentsFieldNumber = 4;
  double x_extents() const;
  void set_x_extents(double value);

  // optional double y_extents = 5;
  bool has_y_extents() const;
  void clear_y_extents();
  static const int kYExtentsFieldNumber = 5;
  double y_extents() const;
  void set_y_extents(double value);

  // optional double z_extents = 6;
  bool has_z_extents() const;
  void clear_z_extents();
  static const int kZExtentsFieldNumber = 6;
  double z_extents() const;
  void set_z_extents(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .killer.proto.ColliderType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::killer::proto::ColliderType type() const;
  void set_type(::killer::proto::ColliderType value);

  // @@protoc_insertion_point(class_scope:killer.proto.U3DPhysxBox)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_pos();
  void clear_has_pos();
  void set_has_x_extents();
  void clear_has_x_extents();
  void set_has_y_extents();
  void clear_has_y_extents();
  void set_has_z_extents();
  void clear_has_z_extents();
  void set_has_rotation();
  void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::killer::proto::Vector3* pos_;
  ::killer::proto::Vector4* rotation_;
  double x_extents_;
  double y_extents_;
  double z_extents_;
  ::google::protobuf::int32 id_;
  int type_;
  friend struct  protobuf_Scene_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class U3DPhysxCapsule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:killer.proto.U3DPhysxCapsule) */ {
 public:
  U3DPhysxCapsule();
  virtual ~U3DPhysxCapsule();

  U3DPhysxCapsule(const U3DPhysxCapsule& from);

  inline U3DPhysxCapsule& operator=(const U3DPhysxCapsule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const U3DPhysxCapsule& default_instance();

  static inline const U3DPhysxCapsule* internal_default_instance() {
    return reinterpret_cast<const U3DPhysxCapsule*>(
               &_U3DPhysxCapsule_default_instance_);
  }

  void Swap(U3DPhysxCapsule* other);

  // implements Message ----------------------------------------------

  inline U3DPhysxCapsule* New() const PROTOBUF_FINAL { return New(NULL); }

  U3DPhysxCapsule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const U3DPhysxCapsule& from);
  void MergeFrom(const U3DPhysxCapsule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(U3DPhysxCapsule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .killer.proto.Vector3 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::killer::proto::Vector3& pos() const;
  ::killer::proto::Vector3* mutable_pos();
  ::killer::proto::Vector3* release_pos();
  void set_allocated_pos(::killer::proto::Vector3* pos);

  // optional .killer.proto.Vector4 rotation = 6;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 6;
  const ::killer::proto::Vector4& rotation() const;
  ::killer::proto::Vector4* mutable_rotation();
  ::killer::proto::Vector4* release_rotation();
  void set_allocated_rotation(::killer::proto::Vector4* rotation);

  // optional double raduis = 4;
  bool has_raduis() const;
  void clear_raduis();
  static const int kRaduisFieldNumber = 4;
  double raduis() const;
  void set_raduis(double value);

  // optional double height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  double height() const;
  void set_height(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .killer.proto.ColliderType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::killer::proto::ColliderType type() const;
  void set_type(::killer::proto::ColliderType value);

  // @@protoc_insertion_point(class_scope:killer.proto.U3DPhysxCapsule)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_pos();
  void clear_has_pos();
  void set_has_raduis();
  void clear_has_raduis();
  void set_has_height();
  void clear_has_height();
  void set_has_rotation();
  void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::killer::proto::Vector3* pos_;
  ::killer::proto::Vector4* rotation_;
  double raduis_;
  double height_;
  ::google::protobuf::int32 id_;
  int type_;
  friend struct  protobuf_Scene_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class U3DPhysxMesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:killer.proto.U3DPhysxMesh) */ {
 public:
  U3DPhysxMesh();
  virtual ~U3DPhysxMesh();

  U3DPhysxMesh(const U3DPhysxMesh& from);

  inline U3DPhysxMesh& operator=(const U3DPhysxMesh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const U3DPhysxMesh& default_instance();

  static inline const U3DPhysxMesh* internal_default_instance() {
    return reinterpret_cast<const U3DPhysxMesh*>(
               &_U3DPhysxMesh_default_instance_);
  }

  void Swap(U3DPhysxMesh* other);

  // implements Message ----------------------------------------------

  inline U3DPhysxMesh* New() const PROTOBUF_FINAL { return New(NULL); }

  U3DPhysxMesh* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const U3DPhysxMesh& from);
  void MergeFrom(const U3DPhysxMesh& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(U3DPhysxMesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .killer.proto.Vector3 vertices = 4;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 4;
  const ::killer::proto::Vector3& vertices(int index) const;
  ::killer::proto::Vector3* mutable_vertices(int index);
  ::killer::proto::Vector3* add_vertices();
  ::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >*
      mutable_vertices();
  const ::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >&
      vertices() const;

  // optional .killer.proto.Vector4 rotation = 5;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  const ::killer::proto::Vector4& rotation() const;
  ::killer::proto::Vector4* mutable_rotation();
  ::killer::proto::Vector4* release_rotation();
  void set_allocated_rotation(::killer::proto::Vector4* rotation);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 vertex_count = 3;
  bool has_vertex_count() const;
  void clear_vertex_count();
  static const int kVertexCountFieldNumber = 3;
  ::google::protobuf::int32 vertex_count() const;
  void set_vertex_count(::google::protobuf::int32 value);

  // optional .killer.proto.ColliderType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::killer::proto::ColliderType type() const;
  void set_type(::killer::proto::ColliderType value);

  // @@protoc_insertion_point(class_scope:killer.proto.U3DPhysxMesh)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_vertex_count();
  void clear_has_vertex_count();
  void set_has_rotation();
  void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 > vertices_;
  ::killer::proto::Vector4* rotation_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 vertex_count_;
  int type_;
  friend struct  protobuf_Scene_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional double x = 1 [default = 0];
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.x)
  return x_;
}
inline void Vector3::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.x)
}

// optional double y = 2 [default = 0];
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.y)
  return y_;
}
inline void Vector3::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.y)
}

// optional double z = 3 [default = 0];
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.z)
  return z_;
}
inline void Vector3::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.z)
}

// -------------------------------------------------------------------

// Vector4

// optional double x = 1 [default = 0];
inline bool Vector4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector4::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector4::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector4::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector4::x() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.x)
  return x_;
}
inline void Vector4::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.x)
}

// optional double y = 2 [default = 0];
inline bool Vector4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector4::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector4::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector4::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector4::y() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.y)
  return y_;
}
inline void Vector4::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.y)
}

// optional double z = 3 [default = 0];
inline bool Vector4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector4::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector4::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector4::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector4::z() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.z)
  return z_;
}
inline void Vector4::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.z)
}

// optional double w = 4 [default = 0];
inline bool Vector4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vector4::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vector4::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vector4::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Vector4::w() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.w)
  return w_;
}
inline void Vector4::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.w)
}

// -------------------------------------------------------------------

// U3DPhysxScene

// optional int32 id = 1;
inline bool U3DPhysxScene::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void U3DPhysxScene::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void U3DPhysxScene::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void U3DPhysxScene::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 U3DPhysxScene::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.id)
  return id_;
}
inline void U3DPhysxScene::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxScene.id)
}

// optional string scene_name = 2;
inline bool U3DPhysxScene::has_scene_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void U3DPhysxScene::set_has_scene_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void U3DPhysxScene::clear_has_scene_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void U3DPhysxScene::clear_scene_name() {
  scene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scene_name();
}
inline const ::std::string& U3DPhysxScene::scene_name() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.scene_name)
  return scene_name_.GetNoArena();
}
inline void U3DPhysxScene::set_scene_name(const ::std::string& value) {
  set_has_scene_name();
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxScene.scene_name)
}
#if LANG_CXX11
inline void U3DPhysxScene::set_scene_name(::std::string&& value) {
  set_has_scene_name();
  scene_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:killer.proto.U3DPhysxScene.scene_name)
}
#endif
inline void U3DPhysxScene::set_scene_name(const char* value) {
  set_has_scene_name();
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:killer.proto.U3DPhysxScene.scene_name)
}
inline void U3DPhysxScene::set_scene_name(const char* value, size_t size) {
  set_has_scene_name();
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:killer.proto.U3DPhysxScene.scene_name)
}
inline ::std::string* U3DPhysxScene::mutable_scene_name() {
  set_has_scene_name();
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.scene_name)
  return scene_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* U3DPhysxScene::release_scene_name() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxScene.scene_name)
  clear_has_scene_name();
  return scene_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void U3DPhysxScene::set_allocated_scene_name(::std::string* scene_name) {
  if (scene_name != NULL) {
    set_has_scene_name();
  } else {
    clear_has_scene_name();
  }
  scene_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_name);
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxScene.scene_name)
}

// repeated .killer.proto.U3DPhysxBox box_collider = 3;
inline int U3DPhysxScene::box_collider_size() const {
  return box_collider_.size();
}
inline void U3DPhysxScene::clear_box_collider() {
  box_collider_.Clear();
}
inline const ::killer::proto::U3DPhysxBox& U3DPhysxScene::box_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Get(index);
}
inline ::killer::proto::U3DPhysxBox* U3DPhysxScene::mutable_box_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Mutable(index);
}
inline ::killer::proto::U3DPhysxBox* U3DPhysxScene::add_box_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >*
U3DPhysxScene::mutable_box_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.box_collider)
  return &box_collider_;
}
inline const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >&
U3DPhysxScene::box_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_;
}

// repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
inline int U3DPhysxScene::sphere_collider_size() const {
  return sphere_collider_.size();
}
inline void U3DPhysxScene::clear_sphere_collider() {
  sphere_collider_.Clear();
}
inline const ::killer::proto::U3DPhysxSphere& U3DPhysxScene::sphere_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Get(index);
}
inline ::killer::proto::U3DPhysxSphere* U3DPhysxScene::mutable_sphere_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Mutable(index);
}
inline ::killer::proto::U3DPhysxSphere* U3DPhysxScene::add_sphere_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >*
U3DPhysxScene::mutable_sphere_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.sphere_collider)
  return &sphere_collider_;
}
inline const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >&
U3DPhysxScene::sphere_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_;
}

// repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
inline int U3DPhysxScene::capsule_collider_size() const {
  return capsule_collider_.size();
}
inline void U3DPhysxScene::clear_capsule_collider() {
  capsule_collider_.Clear();
}
inline const ::killer::proto::U3DPhysxCapsule& U3DPhysxScene::capsule_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Get(index);
}
inline ::killer::proto::U3DPhysxCapsule* U3DPhysxScene::mutable_capsule_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Mutable(index);
}
inline ::killer::proto::U3DPhysxCapsule* U3DPhysxScene::add_capsule_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >*
U3DPhysxScene::mutable_capsule_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.capsule_collider)
  return &capsule_collider_;
}
inline const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >&
U3DPhysxScene::capsule_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_;
}

// repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
inline int U3DPhysxScene::mesh_collider_size() const {
  return mesh_collider_.size();
}
inline void U3DPhysxScene::clear_mesh_collider() {
  mesh_collider_.Clear();
}
inline const ::killer::proto::U3DPhysxMesh& U3DPhysxScene::mesh_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Get(index);
}
inline ::killer::proto::U3DPhysxMesh* U3DPhysxScene::mutable_mesh_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Mutable(index);
}
inline ::killer::proto::U3DPhysxMesh* U3DPhysxScene::add_mesh_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >*
U3DPhysxScene::mutable_mesh_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.mesh_collider)
  return &mesh_collider_;
}
inline const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >&
U3DPhysxScene::mesh_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_;
}

// -------------------------------------------------------------------

// U3DPhysxSphere

// optional int32 id = 1;
inline bool U3DPhysxSphere::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void U3DPhysxSphere::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void U3DPhysxSphere::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void U3DPhysxSphere::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 U3DPhysxSphere::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.id)
  return id_;
}
inline void U3DPhysxSphere::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.id)
}

// optional .killer.proto.ColliderType type = 2;
inline bool U3DPhysxSphere::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void U3DPhysxSphere::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void U3DPhysxSphere::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void U3DPhysxSphere::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::killer::proto::ColliderType U3DPhysxSphere::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
inline void U3DPhysxSphere::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.type)
}

// optional .killer.proto.Vector3 pos = 3;
inline bool U3DPhysxSphere::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void U3DPhysxSphere::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void U3DPhysxSphere::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void U3DPhysxSphere::clear_pos() {
  if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
  clear_has_pos();
}
inline const ::killer::proto::Vector3& U3DPhysxSphere::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.pos)
  return pos_ != NULL ? *pos_
                         : *::killer::proto::Vector3::internal_default_instance();
}
inline ::killer::proto::Vector3* U3DPhysxSphere::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxSphere.pos)
  return pos_;
}
inline ::killer::proto::Vector3* U3DPhysxSphere::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxSphere.pos)
  clear_has_pos();
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void U3DPhysxSphere::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxSphere.pos)
}

// optional double radius = 4;
inline bool U3DPhysxSphere::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void U3DPhysxSphere::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void U3DPhysxSphere::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void U3DPhysxSphere::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double U3DPhysxSphere::radius() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.radius)
  return radius_;
}
inline void U3DPhysxSphere::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.radius)
}

// optional .killer.proto.Vector4 rotation = 5;
inline bool U3DPhysxSphere::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void U3DPhysxSphere::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void U3DPhysxSphere::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void U3DPhysxSphere::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
inline const ::killer::proto::Vector4& U3DPhysxSphere::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
inline ::killer::proto::Vector4* U3DPhysxSphere::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxSphere.rotation)
  return rotation_;
}
inline ::killer::proto::Vector4* U3DPhysxSphere::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxSphere.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void U3DPhysxSphere::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxSphere.rotation)
}

// -------------------------------------------------------------------

// U3DPhysxBox

// optional int32 id = 1;
inline bool U3DPhysxBox::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void U3DPhysxBox::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void U3DPhysxBox::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void U3DPhysxBox::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 U3DPhysxBox::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.id)
  return id_;
}
inline void U3DPhysxBox::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.id)
}

// optional .killer.proto.ColliderType type = 2;
inline bool U3DPhysxBox::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void U3DPhysxBox::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void U3DPhysxBox::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void U3DPhysxBox::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::killer::proto::ColliderType U3DPhysxBox::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
inline void U3DPhysxBox::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.type)
}

// optional .killer.proto.Vector3 pos = 3;
inline bool U3DPhysxBox::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void U3DPhysxBox::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void U3DPhysxBox::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void U3DPhysxBox::clear_pos() {
  if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
  clear_has_pos();
}
inline const ::killer::proto::Vector3& U3DPhysxBox::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.pos)
  return pos_ != NULL ? *pos_
                         : *::killer::proto::Vector3::internal_default_instance();
}
inline ::killer::proto::Vector3* U3DPhysxBox::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxBox.pos)
  return pos_;
}
inline ::killer::proto::Vector3* U3DPhysxBox::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxBox.pos)
  clear_has_pos();
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void U3DPhysxBox::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxBox.pos)
}

// optional double x_extents = 4;
inline bool U3DPhysxBox::has_x_extents() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void U3DPhysxBox::set_has_x_extents() {
  _has_bits_[0] |= 0x00000004u;
}
inline void U3DPhysxBox::clear_has_x_extents() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void U3DPhysxBox::clear_x_extents() {
  x_extents_ = 0;
  clear_has_x_extents();
}
inline double U3DPhysxBox::x_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.x_extents)
  return x_extents_;
}
inline void U3DPhysxBox::set_x_extents(double value) {
  set_has_x_extents();
  x_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.x_extents)
}

// optional double y_extents = 5;
inline bool U3DPhysxBox::has_y_extents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void U3DPhysxBox::set_has_y_extents() {
  _has_bits_[0] |= 0x00000008u;
}
inline void U3DPhysxBox::clear_has_y_extents() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void U3DPhysxBox::clear_y_extents() {
  y_extents_ = 0;
  clear_has_y_extents();
}
inline double U3DPhysxBox::y_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.y_extents)
  return y_extents_;
}
inline void U3DPhysxBox::set_y_extents(double value) {
  set_has_y_extents();
  y_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.y_extents)
}

// optional double z_extents = 6;
inline bool U3DPhysxBox::has_z_extents() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void U3DPhysxBox::set_has_z_extents() {
  _has_bits_[0] |= 0x00000010u;
}
inline void U3DPhysxBox::clear_has_z_extents() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void U3DPhysxBox::clear_z_extents() {
  z_extents_ = 0;
  clear_has_z_extents();
}
inline double U3DPhysxBox::z_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.z_extents)
  return z_extents_;
}
inline void U3DPhysxBox::set_z_extents(double value) {
  set_has_z_extents();
  z_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.z_extents)
}

// optional .killer.proto.Vector4 rotation = 7;
inline bool U3DPhysxBox::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void U3DPhysxBox::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void U3DPhysxBox::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void U3DPhysxBox::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
inline const ::killer::proto::Vector4& U3DPhysxBox::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
inline ::killer::proto::Vector4* U3DPhysxBox::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxBox.rotation)
  return rotation_;
}
inline ::killer::proto::Vector4* U3DPhysxBox::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxBox.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void U3DPhysxBox::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxBox.rotation)
}

// -------------------------------------------------------------------

// U3DPhysxCapsule

// optional int32 id = 1;
inline bool U3DPhysxCapsule::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void U3DPhysxCapsule::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void U3DPhysxCapsule::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void U3DPhysxCapsule::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 U3DPhysxCapsule::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.id)
  return id_;
}
inline void U3DPhysxCapsule::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.id)
}

// optional .killer.proto.ColliderType type = 2;
inline bool U3DPhysxCapsule::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void U3DPhysxCapsule::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void U3DPhysxCapsule::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void U3DPhysxCapsule::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::killer::proto::ColliderType U3DPhysxCapsule::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
inline void U3DPhysxCapsule::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.type)
}

// optional .killer.proto.Vector3 pos = 3;
inline bool U3DPhysxCapsule::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void U3DPhysxCapsule::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void U3DPhysxCapsule::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void U3DPhysxCapsule::clear_pos() {
  if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
  clear_has_pos();
}
inline const ::killer::proto::Vector3& U3DPhysxCapsule::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.pos)
  return pos_ != NULL ? *pos_
                         : *::killer::proto::Vector3::internal_default_instance();
}
inline ::killer::proto::Vector3* U3DPhysxCapsule::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxCapsule.pos)
  return pos_;
}
inline ::killer::proto::Vector3* U3DPhysxCapsule::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxCapsule.pos)
  clear_has_pos();
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void U3DPhysxCapsule::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxCapsule.pos)
}

// optional double raduis = 4;
inline bool U3DPhysxCapsule::has_raduis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void U3DPhysxCapsule::set_has_raduis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void U3DPhysxCapsule::clear_has_raduis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void U3DPhysxCapsule::clear_raduis() {
  raduis_ = 0;
  clear_has_raduis();
}
inline double U3DPhysxCapsule::raduis() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.raduis)
  return raduis_;
}
inline void U3DPhysxCapsule::set_raduis(double value) {
  set_has_raduis();
  raduis_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.raduis)
}

// optional double height = 5;
inline bool U3DPhysxCapsule::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void U3DPhysxCapsule::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void U3DPhysxCapsule::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void U3DPhysxCapsule::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double U3DPhysxCapsule::height() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.height)
  return height_;
}
inline void U3DPhysxCapsule::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.height)
}

// optional .killer.proto.Vector4 rotation = 6;
inline bool U3DPhysxCapsule::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void U3DPhysxCapsule::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void U3DPhysxCapsule::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void U3DPhysxCapsule::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
inline const ::killer::proto::Vector4& U3DPhysxCapsule::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
inline ::killer::proto::Vector4* U3DPhysxCapsule::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxCapsule.rotation)
  return rotation_;
}
inline ::killer::proto::Vector4* U3DPhysxCapsule::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxCapsule.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void U3DPhysxCapsule::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxCapsule.rotation)
}

// -------------------------------------------------------------------

// U3DPhysxMesh

// optional int32 id = 1;
inline bool U3DPhysxMesh::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void U3DPhysxMesh::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void U3DPhysxMesh::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void U3DPhysxMesh::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 U3DPhysxMesh::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.id)
  return id_;
}
inline void U3DPhysxMesh::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.id)
}

// optional .killer.proto.ColliderType type = 2;
inline bool U3DPhysxMesh::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void U3DPhysxMesh::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void U3DPhysxMesh::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void U3DPhysxMesh::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::killer::proto::ColliderType U3DPhysxMesh::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
inline void U3DPhysxMesh::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.type)
}

// optional int32 vertex_count = 3;
inline bool U3DPhysxMesh::has_vertex_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void U3DPhysxMesh::set_has_vertex_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void U3DPhysxMesh::clear_has_vertex_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void U3DPhysxMesh::clear_vertex_count() {
  vertex_count_ = 0;
  clear_has_vertex_count();
}
inline ::google::protobuf::int32 U3DPhysxMesh::vertex_count() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.vertex_count)
  return vertex_count_;
}
inline void U3DPhysxMesh::set_vertex_count(::google::protobuf::int32 value) {
  set_has_vertex_count();
  vertex_count_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.vertex_count)
}

// repeated .killer.proto.Vector3 vertices = 4;
inline int U3DPhysxMesh::vertices_size() const {
  return vertices_.size();
}
inline void U3DPhysxMesh::clear_vertices() {
  vertices_.Clear();
}
inline const ::killer::proto::Vector3& U3DPhysxMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Get(index);
}
inline ::killer::proto::Vector3* U3DPhysxMesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Mutable(index);
}
inline ::killer::proto::Vector3* U3DPhysxMesh::add_vertices() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >*
U3DPhysxMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxMesh.vertices)
  return &vertices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >&
U3DPhysxMesh::vertices() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxMesh.vertices)
  return vertices_;
}

// optional .killer.proto.Vector4 rotation = 5;
inline bool U3DPhysxMesh::has_rotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void U3DPhysxMesh::set_has_rotation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void U3DPhysxMesh::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void U3DPhysxMesh::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
inline const ::killer::proto::Vector4& U3DPhysxMesh::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
inline ::killer::proto::Vector4* U3DPhysxMesh::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxMesh.rotation)
  return rotation_;
}
inline ::killer::proto::Vector4* U3DPhysxMesh::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxMesh.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void U3DPhysxMesh::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxMesh.rotation)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace killer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::killer::proto::ColliderType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::killer::proto::ColliderType>() {
  return ::killer::proto::ColliderType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Scene_2eproto__INCLUDED
