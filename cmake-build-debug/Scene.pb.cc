// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace killer {
namespace proto {
class Vector3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector3> {
} _Vector3_default_instance_;
class Vector4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector4> {
} _Vector4_default_instance_;
class U3DPhysxSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxScene> {
} _U3DPhysxScene_default_instance_;
class U3DPhysxSphereDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxSphere> {
} _U3DPhysxSphere_default_instance_;
class U3DPhysxBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxBox> {
} _U3DPhysxBox_default_instance_;
class U3DPhysxCapsuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxCapsule> {
} _U3DPhysxCapsule_default_instance_;
class U3DPhysxMeshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxMesh> {
} _U3DPhysxMesh_default_instance_;

namespace protobuf_Scene_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, w_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, scene_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, box_collider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, sphere_collider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, capsule_collider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, mesh_collider_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, rotation_),
  3,
  4,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, x_extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, y_extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, z_extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, rotation_),
  5,
  6,
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, raduis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, rotation_),
  4,
  5,
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, vertex_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, vertices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, rotation_),
  1,
  3,
  2,
  ~0u,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Vector3)},
  { 10, 18, sizeof(Vector4)},
  { 22, 32, sizeof(U3DPhysxScene)},
  { 38, 47, sizeof(U3DPhysxSphere)},
  { 52, 63, sizeof(U3DPhysxBox)},
  { 70, 80, sizeof(U3DPhysxCapsule)},
  { 86, 95, sizeof(U3DPhysxMesh)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_U3DPhysxScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_U3DPhysxSphere_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_U3DPhysxBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_U3DPhysxCapsule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_U3DPhysxMesh_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Scene.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vector3_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Vector4_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _U3DPhysxScene_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _U3DPhysxSphere_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _U3DPhysxBox_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _U3DPhysxCapsule_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _U3DPhysxMesh_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector3_default_instance_.DefaultConstruct();
  _Vector4_default_instance_.DefaultConstruct();
  _U3DPhysxScene_default_instance_.DefaultConstruct();
  _U3DPhysxSphere_default_instance_.DefaultConstruct();
  _U3DPhysxBox_default_instance_.DefaultConstruct();
  _U3DPhysxCapsule_default_instance_.DefaultConstruct();
  _U3DPhysxMesh_default_instance_.DefaultConstruct();
  _U3DPhysxSphere_default_instance_.get_mutable()->pos_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
  _U3DPhysxSphere_default_instance_.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
  _U3DPhysxBox_default_instance_.get_mutable()->pos_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
  _U3DPhysxBox_default_instance_.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
  _U3DPhysxCapsule_default_instance_.get_mutable()->pos_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
  _U3DPhysxCapsule_default_instance_.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
  _U3DPhysxMesh_default_instance_.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013Scene.proto\022\014killer.proto\"3\n\007Vector3\022\014"
      "\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014\n\001z\030\003 \001(\001:\0010"
      "\"A\n\007Vector4\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022"
      "\014\n\001z\030\003 \001(\001:\0010\022\014\n\001w\030\004 \001(\001:\0010\"\203\002\n\rU3DPhysx"
      "Scene\022\n\n\002id\030\001 \001(\005\022\022\n\nscene_name\030\002 \001(\t\022/\n"
      "\014box_collider\030\003 \003(\0132\031.killer.proto.U3DPh"
      "ysxBox\0225\n\017sphere_collider\030\004 \003(\0132\034.killer"
      ".proto.U3DPhysxSphere\0227\n\020capsule_collide"
      "r\030\005 \003(\0132\035.killer.proto.U3DPhysxCapsule\0221"
      "\n\rmesh_collider\030\006 \003(\0132\032.killer.proto.U3D"
      "PhysxMesh\"\243\001\n\016U3DPhysxSphere\022\n\n\002id\030\001 \001(\005"
      "\022(\n\004type\030\002 \001(\0162\032.killer.proto.ColliderTy"
      "pe\022\"\n\003pos\030\003 \001(\0132\025.killer.proto.Vector3\022\016"
      "\n\006radius\030\004 \001(\001\022\'\n\010rotation\030\005 \001(\0132\025.kille"
      "r.proto.Vector4\"\311\001\n\013U3DPhysxBox\022\n\n\002id\030\001 "
      "\001(\005\022(\n\004type\030\002 \001(\0162\032.killer.proto.Collide"
      "rType\022\"\n\003pos\030\003 \001(\0132\025.killer.proto.Vector"
      "3\022\021\n\tx_extents\030\004 \001(\001\022\021\n\ty_extents\030\005 \001(\001\022"
      "\021\n\tz_extents\030\006 \001(\001\022\'\n\010rotation\030\007 \001(\0132\025.k"
      "iller.proto.Vector4\"\264\001\n\017U3DPhysxCapsule\022"
      "\n\n\002id\030\001 \001(\005\022(\n\004type\030\002 \001(\0162\032.killer.proto"
      ".ColliderType\022\"\n\003pos\030\003 \001(\0132\025.killer.prot"
      "o.Vector3\022\016\n\006raduis\030\004 \001(\001\022\016\n\006height\030\005 \001("
      "\001\022\'\n\010rotation\030\006 \001(\0132\025.killer.proto.Vecto"
      "r4\"\254\001\n\014U3DPhysxMesh\022\n\n\002id\030\001 \001(\005\022(\n\004type\030"
      "\002 \001(\0162\032.killer.proto.ColliderType\022\024\n\014ver"
      "tex_count\030\003 \001(\005\022\'\n\010vertices\030\004 \003(\0132\025.kill"
      "er.proto.Vector3\022\'\n\010rotation\030\005 \001(\0132\025.kil"
      "ler.proto.Vector4*:\n\014ColliderType\022\007\n\003BOX"
      "\020\001\022\n\n\006SPHERE\020\002\022\013\n\007CAPSULE\020\003\022\010\n\004MESH\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Scene.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Scene_2eproto

const ::google::protobuf::EnumDescriptor* ColliderType_descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_enum_descriptors[0];
}
bool ColliderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Scene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[0].descriptor;
}

const Vector3& Vector3::default_instance() {
  protobuf_Scene_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.Vector3)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (tag == 9u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (tag == 17u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (tag == 25u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector3)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector3)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.Vector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional double x = 1 [default = 0];
bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Vector3::x() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.x)
  return x_;
}
void Vector3::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.x)
}

// optional double y = 2 [default = 0];
bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Vector3::y() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.y)
  return y_;
}
void Vector3::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.y)
}

// optional double z = 3 [default = 0];
bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
double Vector3::z() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.z)
  return z_;
}
void Vector3::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector4::kXFieldNumber;
const int Vector4::kYFieldNumber;
const int Vector4::kZFieldNumber;
const int Vector4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector4::Vector4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Scene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector4)
}
Vector4::Vector4(const Vector4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector4)
}

void Vector4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
}

Vector4::~Vector4() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector4)
  SharedDtor();
}

void Vector4::SharedDtor() {
}

void Vector4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4::descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[1].descriptor;
}

const Vector4& Vector4::default_instance() {
  protobuf_Scene_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector4* Vector4::New(::google::protobuf::Arena* arena) const {
  Vector4* n = new Vector4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector4::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.Vector4)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (tag == 9u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (tag == 17u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (tag == 25u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double w = 4 [default = 0];
      case 4: {
        if (tag == 33u) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector4)
  return false;
#undef DO_
}

void Vector4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector4)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4 [default = 0];
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.Vector4)
}

::google::protobuf::uint8* Vector4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector4)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4 [default = 0];
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector4)
  return target;
}

size_t Vector4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.Vector4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double w = 4 [default = 0];
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.Vector4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.Vector4)
    MergeFrom(*source);
  }
}

void Vector4::MergeFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
}

void Vector4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4::CopyFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4::IsInitialized() const {
  return true;
}

void Vector4::Swap(Vector4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector4::InternalSwap(Vector4* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector4::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector4

// optional double x = 1 [default = 0];
bool Vector4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector4::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector4::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector4::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Vector4::x() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.x)
  return x_;
}
void Vector4::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.x)
}

// optional double y = 2 [default = 0];
bool Vector4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector4::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector4::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector4::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Vector4::y() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.y)
  return y_;
}
void Vector4::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.y)
}

// optional double z = 3 [default = 0];
bool Vector4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector4::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector4::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector4::clear_z() {
  z_ = 0;
  clear_has_z();
}
double Vector4::z() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.z)
  return z_;
}
void Vector4::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.z)
}

// optional double w = 4 [default = 0];
bool Vector4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vector4::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Vector4::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vector4::clear_w() {
  w_ = 0;
  clear_has_w();
}
double Vector4::w() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.w)
  return w_;
}
void Vector4::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxScene::kIdFieldNumber;
const int U3DPhysxScene::kSceneNameFieldNumber;
const int U3DPhysxScene::kBoxColliderFieldNumber;
const int U3DPhysxScene::kSphereColliderFieldNumber;
const int U3DPhysxScene::kCapsuleColliderFieldNumber;
const int U3DPhysxScene::kMeshColliderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxScene::U3DPhysxScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Scene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxScene)
}
U3DPhysxScene::U3DPhysxScene(const U3DPhysxScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      box_collider_(from.box_collider_),
      sphere_collider_(from.sphere_collider_),
      capsule_collider_(from.capsule_collider_),
      mesh_collider_(from.mesh_collider_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scene_name()) {
    scene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxScene)
}

void U3DPhysxScene::SharedCtor() {
  _cached_size_ = 0;
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

U3DPhysxScene::~U3DPhysxScene() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxScene)
  SharedDtor();
}

void U3DPhysxScene::SharedDtor() {
  scene_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void U3DPhysxScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxScene::descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[2].descriptor;
}

const U3DPhysxScene& U3DPhysxScene::default_instance() {
  protobuf_Scene_2eproto::InitDefaults();
  return *internal_default_instance();
}

U3DPhysxScene* U3DPhysxScene::New(::google::protobuf::Arena* arena) const {
  U3DPhysxScene* n = new U3DPhysxScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxScene::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxScene)
  box_collider_.Clear();
  sphere_collider_.Clear();
  capsule_collider_.Clear();
  mesh_collider_.Clear();
  if (has_scene_name()) {
    GOOGLE_DCHECK(!scene_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*scene_name_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scene_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "killer.proto.U3DPhysxScene.scene_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.U3DPhysxBox box_collider = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_box_collider()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sphere_collider()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_capsule_collider()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh_collider()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxScene)
  return false;
#undef DO_
}

void U3DPhysxScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxScene)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer.proto.U3DPhysxScene.scene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scene_name(), output);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (unsigned int i = 0, n = this->box_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->box_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (unsigned int i = 0, n = this->sphere_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sphere_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (unsigned int i = 0, n = this->capsule_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->capsule_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (unsigned int i = 0, n = this->mesh_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mesh_collider(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxScene)
}

::google::protobuf::uint8* U3DPhysxScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxScene)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer.proto.U3DPhysxScene.scene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scene_name(), target);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (unsigned int i = 0, n = this->box_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->box_collider(i), false, target);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (unsigned int i = 0, n = this->sphere_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->sphere_collider(i), false, target);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (unsigned int i = 0, n = this->capsule_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->capsule_collider(i), false, target);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (unsigned int i = 0, n = this->mesh_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->mesh_collider(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxScene)
  return target;
}

size_t U3DPhysxScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxScene)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  {
    unsigned int count = this->box_collider_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_collider(i));
    }
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  {
    unsigned int count = this->sphere_collider_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sphere_collider(i));
    }
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  {
    unsigned int count = this->capsule_collider_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capsule_collider(i));
    }
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  {
    unsigned int count = this->mesh_collider_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh_collider(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string scene_name = 2;
    if (has_scene_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_name());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxScene)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxScene)
    MergeFrom(*source);
  }
}

void U3DPhysxScene::MergeFrom(const U3DPhysxScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  box_collider_.MergeFrom(from.box_collider_);
  sphere_collider_.MergeFrom(from.sphere_collider_);
  capsule_collider_.MergeFrom(from.capsule_collider_);
  mesh_collider_.MergeFrom(from.mesh_collider_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_scene_name()) {
      set_has_scene_name();
      scene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void U3DPhysxScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxScene::CopyFrom(const U3DPhysxScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxScene::IsInitialized() const {
  return true;
}

void U3DPhysxScene::Swap(U3DPhysxScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxScene::InternalSwap(U3DPhysxScene* other) {
  box_collider_.UnsafeArenaSwap(&other->box_collider_);
  sphere_collider_.UnsafeArenaSwap(&other->sphere_collider_);
  capsule_collider_.UnsafeArenaSwap(&other->capsule_collider_);
  mesh_collider_.UnsafeArenaSwap(&other->mesh_collider_);
  scene_name_.Swap(&other->scene_name_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxScene::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxScene

// optional int32 id = 1;
bool U3DPhysxScene::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void U3DPhysxScene::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void U3DPhysxScene::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void U3DPhysxScene::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 U3DPhysxScene::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.id)
  return id_;
}
void U3DPhysxScene::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxScene.id)
}

// optional string scene_name = 2;
bool U3DPhysxScene::has_scene_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void U3DPhysxScene::set_has_scene_name() {
  _has_bits_[0] |= 0x00000001u;
}
void U3DPhysxScene::clear_has_scene_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void U3DPhysxScene::clear_scene_name() {
  scene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scene_name();
}
const ::std::string& U3DPhysxScene::scene_name() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.scene_name)
  return scene_name_.GetNoArena();
}
void U3DPhysxScene::set_scene_name(const ::std::string& value) {
  set_has_scene_name();
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxScene.scene_name)
}
#if LANG_CXX11
void U3DPhysxScene::set_scene_name(::std::string&& value) {
  set_has_scene_name();
  scene_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:killer.proto.U3DPhysxScene.scene_name)
}
#endif
void U3DPhysxScene::set_scene_name(const char* value) {
  set_has_scene_name();
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:killer.proto.U3DPhysxScene.scene_name)
}
void U3DPhysxScene::set_scene_name(const char* value, size_t size) {
  set_has_scene_name();
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:killer.proto.U3DPhysxScene.scene_name)
}
::std::string* U3DPhysxScene::mutable_scene_name() {
  set_has_scene_name();
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.scene_name)
  return scene_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* U3DPhysxScene::release_scene_name() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxScene.scene_name)
  clear_has_scene_name();
  return scene_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void U3DPhysxScene::set_allocated_scene_name(::std::string* scene_name) {
  if (scene_name != NULL) {
    set_has_scene_name();
  } else {
    clear_has_scene_name();
  }
  scene_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_name);
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxScene.scene_name)
}

// repeated .killer.proto.U3DPhysxBox box_collider = 3;
int U3DPhysxScene::box_collider_size() const {
  return box_collider_.size();
}
void U3DPhysxScene::clear_box_collider() {
  box_collider_.Clear();
}
const ::killer::proto::U3DPhysxBox& U3DPhysxScene::box_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Get(index);
}
::killer::proto::U3DPhysxBox* U3DPhysxScene::mutable_box_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Mutable(index);
}
::killer::proto::U3DPhysxBox* U3DPhysxScene::add_box_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >*
U3DPhysxScene::mutable_box_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.box_collider)
  return &box_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >&
U3DPhysxScene::box_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_;
}

// repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
int U3DPhysxScene::sphere_collider_size() const {
  return sphere_collider_.size();
}
void U3DPhysxScene::clear_sphere_collider() {
  sphere_collider_.Clear();
}
const ::killer::proto::U3DPhysxSphere& U3DPhysxScene::sphere_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Get(index);
}
::killer::proto::U3DPhysxSphere* U3DPhysxScene::mutable_sphere_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Mutable(index);
}
::killer::proto::U3DPhysxSphere* U3DPhysxScene::add_sphere_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >*
U3DPhysxScene::mutable_sphere_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.sphere_collider)
  return &sphere_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >&
U3DPhysxScene::sphere_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_;
}

// repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
int U3DPhysxScene::capsule_collider_size() const {
  return capsule_collider_.size();
}
void U3DPhysxScene::clear_capsule_collider() {
  capsule_collider_.Clear();
}
const ::killer::proto::U3DPhysxCapsule& U3DPhysxScene::capsule_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Get(index);
}
::killer::proto::U3DPhysxCapsule* U3DPhysxScene::mutable_capsule_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Mutable(index);
}
::killer::proto::U3DPhysxCapsule* U3DPhysxScene::add_capsule_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >*
U3DPhysxScene::mutable_capsule_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.capsule_collider)
  return &capsule_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >&
U3DPhysxScene::capsule_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_;
}

// repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
int U3DPhysxScene::mesh_collider_size() const {
  return mesh_collider_.size();
}
void U3DPhysxScene::clear_mesh_collider() {
  mesh_collider_.Clear();
}
const ::killer::proto::U3DPhysxMesh& U3DPhysxScene::mesh_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Get(index);
}
::killer::proto::U3DPhysxMesh* U3DPhysxScene::mutable_mesh_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Mutable(index);
}
::killer::proto::U3DPhysxMesh* U3DPhysxScene::add_mesh_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >*
U3DPhysxScene::mutable_mesh_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.mesh_collider)
  return &mesh_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >&
U3DPhysxScene::mesh_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxSphere::kIdFieldNumber;
const int U3DPhysxSphere::kTypeFieldNumber;
const int U3DPhysxSphere::kPosFieldNumber;
const int U3DPhysxSphere::kRadiusFieldNumber;
const int U3DPhysxSphere::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxSphere::U3DPhysxSphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Scene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxSphere)
}
U3DPhysxSphere::U3DPhysxSphere(const U3DPhysxSphere& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::killer::proto::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxSphere)
}

void U3DPhysxSphere::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(id_));
  type_ = 1;
}

U3DPhysxSphere::~U3DPhysxSphere() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxSphere)
  SharedDtor();
}

void U3DPhysxSphere::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete rotation_;
  }
}

void U3DPhysxSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxSphere::descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[3].descriptor;
}

const U3DPhysxSphere& U3DPhysxSphere::default_instance() {
  protobuf_Scene_2eproto::InitDefaults();
  return *internal_default_instance();
}

U3DPhysxSphere* U3DPhysxSphere::New(::google::protobuf::Arena* arena) const {
  U3DPhysxSphere* n = new U3DPhysxSphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxSphere)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::killer::proto::Vector3::Clear();
    }
    if (has_rotation()) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::killer::proto::Vector4::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&radius_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&radius_) + sizeof(id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radius = 4;
      case 4: {
        if (tag == 33u) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxSphere)
  return false;
#undef DO_
}

void U3DPhysxSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxSphere)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxSphere)
}

::google::protobuf::uint8* U3DPhysxSphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxSphere)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional double radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->rotation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxSphere)
  return target;
}

size_t U3DPhysxSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxSphere)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .killer.proto.Vector4 rotation = 5;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

    // optional double radius = 4;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxSphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxSphere)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxSphere* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxSphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxSphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxSphere)
    MergeFrom(*source);
  }
}

void U3DPhysxSphere::MergeFrom(const U3DPhysxSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxSphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_pos()) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void U3DPhysxSphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxSphere::CopyFrom(const U3DPhysxSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxSphere::IsInitialized() const {
  return true;
}

void U3DPhysxSphere::Swap(U3DPhysxSphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxSphere::InternalSwap(U3DPhysxSphere* other) {
  std::swap(pos_, other->pos_);
  std::swap(rotation_, other->rotation_);
  std::swap(radius_, other->radius_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxSphere::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxSphere

// optional int32 id = 1;
bool U3DPhysxSphere::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void U3DPhysxSphere::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void U3DPhysxSphere::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void U3DPhysxSphere::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 U3DPhysxSphere::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.id)
  return id_;
}
void U3DPhysxSphere::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.id)
}

// optional .killer.proto.ColliderType type = 2;
bool U3DPhysxSphere::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void U3DPhysxSphere::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void U3DPhysxSphere::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void U3DPhysxSphere::clear_type() {
  type_ = 1;
  clear_has_type();
}
::killer::proto::ColliderType U3DPhysxSphere::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
void U3DPhysxSphere::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.type)
}

// optional .killer.proto.Vector3 pos = 3;
bool U3DPhysxSphere::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void U3DPhysxSphere::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void U3DPhysxSphere::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void U3DPhysxSphere::clear_pos() {
  if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
  clear_has_pos();
}
const ::killer::proto::Vector3& U3DPhysxSphere::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.pos)
  return pos_ != NULL ? *pos_
                         : *::killer::proto::Vector3::internal_default_instance();
}
::killer::proto::Vector3* U3DPhysxSphere::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxSphere.pos)
  return pos_;
}
::killer::proto::Vector3* U3DPhysxSphere::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxSphere.pos)
  clear_has_pos();
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
void U3DPhysxSphere::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxSphere.pos)
}

// optional double radius = 4;
bool U3DPhysxSphere::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void U3DPhysxSphere::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void U3DPhysxSphere::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void U3DPhysxSphere::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
double U3DPhysxSphere::radius() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.radius)
  return radius_;
}
void U3DPhysxSphere::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.radius)
}

// optional .killer.proto.Vector4 rotation = 5;
bool U3DPhysxSphere::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void U3DPhysxSphere::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
void U3DPhysxSphere::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
void U3DPhysxSphere::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
const ::killer::proto::Vector4& U3DPhysxSphere::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
::killer::proto::Vector4* U3DPhysxSphere::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxSphere.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxSphere::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxSphere.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxSphere::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxSphere.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxBox::kIdFieldNumber;
const int U3DPhysxBox::kTypeFieldNumber;
const int U3DPhysxBox::kPosFieldNumber;
const int U3DPhysxBox::kXExtentsFieldNumber;
const int U3DPhysxBox::kYExtentsFieldNumber;
const int U3DPhysxBox::kZExtentsFieldNumber;
const int U3DPhysxBox::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxBox::U3DPhysxBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Scene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxBox)
}
U3DPhysxBox::U3DPhysxBox(const U3DPhysxBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::killer::proto::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&x_extents_, &from.x_extents_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x_extents_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxBox)
}

void U3DPhysxBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(id_));
  type_ = 1;
}

U3DPhysxBox::~U3DPhysxBox() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxBox)
  SharedDtor();
}

void U3DPhysxBox::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete rotation_;
  }
}

void U3DPhysxBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxBox::descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[4].descriptor;
}

const U3DPhysxBox& U3DPhysxBox::default_instance() {
  protobuf_Scene_2eproto::InitDefaults();
  return *internal_default_instance();
}

U3DPhysxBox* U3DPhysxBox::New(::google::protobuf::Arena* arena) const {
  U3DPhysxBox* n = new U3DPhysxBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxBox::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxBox)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::killer::proto::Vector3::Clear();
    }
    if (has_rotation()) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::killer::proto::Vector4::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&x_extents_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&x_extents_) + sizeof(id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x_extents = 4;
      case 4: {
        if (tag == 33u) {
          set_has_x_extents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_extents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y_extents = 5;
      case 5: {
        if (tag == 41u) {
          set_has_y_extents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_extents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z_extents = 6;
      case 6: {
        if (tag == 49u) {
          set_has_z_extents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_extents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector4 rotation = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxBox)
  return false;
#undef DO_
}

void U3DPhysxBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxBox)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double x_extents = 4;
  if (has_x_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x_extents(), output);
  }

  // optional double y_extents = 5;
  if (has_y_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y_extents(), output);
  }

  // optional double z_extents = 6;
  if (has_z_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z_extents(), output);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxBox)
}

::google::protobuf::uint8* U3DPhysxBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxBox)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional double x_extents = 4;
  if (has_x_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x_extents(), target);
  }

  // optional double y_extents = 5;
  if (has_y_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y_extents(), target);
  }

  // optional double z_extents = 6;
  if (has_z_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z_extents(), target);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rotation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxBox)
  return target;
}

size_t U3DPhysxBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .killer.proto.Vector4 rotation = 7;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

    // optional double x_extents = 4;
    if (has_x_extents()) {
      total_size += 1 + 8;
    }

    // optional double y_extents = 5;
    if (has_y_extents()) {
      total_size += 1 + 8;
    }

    // optional double z_extents = 6;
    if (has_z_extents()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxBox)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxBox)
    MergeFrom(*source);
  }
}

void U3DPhysxBox::MergeFrom(const U3DPhysxBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_pos()) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (from.has_x_extents()) {
      set_x_extents(from.x_extents());
    }
    if (from.has_y_extents()) {
      set_y_extents(from.y_extents());
    }
    if (from.has_z_extents()) {
      set_z_extents(from.z_extents());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void U3DPhysxBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxBox::CopyFrom(const U3DPhysxBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxBox::IsInitialized() const {
  return true;
}

void U3DPhysxBox::Swap(U3DPhysxBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxBox::InternalSwap(U3DPhysxBox* other) {
  std::swap(pos_, other->pos_);
  std::swap(rotation_, other->rotation_);
  std::swap(x_extents_, other->x_extents_);
  std::swap(y_extents_, other->y_extents_);
  std::swap(z_extents_, other->z_extents_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxBox::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxBox

// optional int32 id = 1;
bool U3DPhysxBox::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void U3DPhysxBox::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
void U3DPhysxBox::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void U3DPhysxBox::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 U3DPhysxBox::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.id)
  return id_;
}
void U3DPhysxBox::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.id)
}

// optional .killer.proto.ColliderType type = 2;
bool U3DPhysxBox::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void U3DPhysxBox::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void U3DPhysxBox::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void U3DPhysxBox::clear_type() {
  type_ = 1;
  clear_has_type();
}
::killer::proto::ColliderType U3DPhysxBox::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
void U3DPhysxBox::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.type)
}

// optional .killer.proto.Vector3 pos = 3;
bool U3DPhysxBox::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void U3DPhysxBox::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void U3DPhysxBox::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void U3DPhysxBox::clear_pos() {
  if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
  clear_has_pos();
}
const ::killer::proto::Vector3& U3DPhysxBox::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.pos)
  return pos_ != NULL ? *pos_
                         : *::killer::proto::Vector3::internal_default_instance();
}
::killer::proto::Vector3* U3DPhysxBox::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxBox.pos)
  return pos_;
}
::killer::proto::Vector3* U3DPhysxBox::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxBox.pos)
  clear_has_pos();
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
void U3DPhysxBox::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxBox.pos)
}

// optional double x_extents = 4;
bool U3DPhysxBox::has_x_extents() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void U3DPhysxBox::set_has_x_extents() {
  _has_bits_[0] |= 0x00000004u;
}
void U3DPhysxBox::clear_has_x_extents() {
  _has_bits_[0] &= ~0x00000004u;
}
void U3DPhysxBox::clear_x_extents() {
  x_extents_ = 0;
  clear_has_x_extents();
}
double U3DPhysxBox::x_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.x_extents)
  return x_extents_;
}
void U3DPhysxBox::set_x_extents(double value) {
  set_has_x_extents();
  x_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.x_extents)
}

// optional double y_extents = 5;
bool U3DPhysxBox::has_y_extents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void U3DPhysxBox::set_has_y_extents() {
  _has_bits_[0] |= 0x00000008u;
}
void U3DPhysxBox::clear_has_y_extents() {
  _has_bits_[0] &= ~0x00000008u;
}
void U3DPhysxBox::clear_y_extents() {
  y_extents_ = 0;
  clear_has_y_extents();
}
double U3DPhysxBox::y_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.y_extents)
  return y_extents_;
}
void U3DPhysxBox::set_y_extents(double value) {
  set_has_y_extents();
  y_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.y_extents)
}

// optional double z_extents = 6;
bool U3DPhysxBox::has_z_extents() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void U3DPhysxBox::set_has_z_extents() {
  _has_bits_[0] |= 0x00000010u;
}
void U3DPhysxBox::clear_has_z_extents() {
  _has_bits_[0] &= ~0x00000010u;
}
void U3DPhysxBox::clear_z_extents() {
  z_extents_ = 0;
  clear_has_z_extents();
}
double U3DPhysxBox::z_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.z_extents)
  return z_extents_;
}
void U3DPhysxBox::set_z_extents(double value) {
  set_has_z_extents();
  z_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.z_extents)
}

// optional .killer.proto.Vector4 rotation = 7;
bool U3DPhysxBox::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void U3DPhysxBox::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
void U3DPhysxBox::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
void U3DPhysxBox::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
const ::killer::proto::Vector4& U3DPhysxBox::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
::killer::proto::Vector4* U3DPhysxBox::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxBox.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxBox::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxBox.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxBox::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxBox.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxCapsule::kIdFieldNumber;
const int U3DPhysxCapsule::kTypeFieldNumber;
const int U3DPhysxCapsule::kPosFieldNumber;
const int U3DPhysxCapsule::kRaduisFieldNumber;
const int U3DPhysxCapsule::kHeightFieldNumber;
const int U3DPhysxCapsule::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxCapsule::U3DPhysxCapsule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Scene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxCapsule)
}
U3DPhysxCapsule::U3DPhysxCapsule(const U3DPhysxCapsule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::killer::proto::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&raduis_, &from.raduis_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&raduis_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxCapsule)
}

void U3DPhysxCapsule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(id_));
  type_ = 1;
}

U3DPhysxCapsule::~U3DPhysxCapsule() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxCapsule)
  SharedDtor();
}

void U3DPhysxCapsule::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete rotation_;
  }
}

void U3DPhysxCapsule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxCapsule::descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[5].descriptor;
}

const U3DPhysxCapsule& U3DPhysxCapsule::default_instance() {
  protobuf_Scene_2eproto::InitDefaults();
  return *internal_default_instance();
}

U3DPhysxCapsule* U3DPhysxCapsule::New(::google::protobuf::Arena* arena) const {
  U3DPhysxCapsule* n = new U3DPhysxCapsule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxCapsule::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxCapsule)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::killer::proto::Vector3::Clear();
    }
    if (has_rotation()) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::killer::proto::Vector4::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&raduis_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&raduis_) + sizeof(id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxCapsule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxCapsule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double raduis = 4;
      case 4: {
        if (tag == 33u) {
          set_has_raduis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raduis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 5;
      case 5: {
        if (tag == 41u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector4 rotation = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxCapsule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxCapsule)
  return false;
#undef DO_
}

void U3DPhysxCapsule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxCapsule)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double raduis = 4;
  if (has_raduis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->raduis(), output);
  }

  // optional double height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxCapsule)
}

::google::protobuf::uint8* U3DPhysxCapsule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxCapsule)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional double raduis = 4;
  if (has_raduis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->raduis(), target);
  }

  // optional double height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->rotation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxCapsule)
  return target;
}

size_t U3DPhysxCapsule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxCapsule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .killer.proto.Vector4 rotation = 6;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

    // optional double raduis = 4;
    if (has_raduis()) {
      total_size += 1 + 8;
    }

    // optional double height = 5;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxCapsule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxCapsule)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxCapsule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxCapsule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxCapsule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxCapsule)
    MergeFrom(*source);
  }
}

void U3DPhysxCapsule::MergeFrom(const U3DPhysxCapsule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxCapsule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_pos()) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (from.has_raduis()) {
      set_raduis(from.raduis());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void U3DPhysxCapsule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxCapsule::CopyFrom(const U3DPhysxCapsule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxCapsule::IsInitialized() const {
  return true;
}

void U3DPhysxCapsule::Swap(U3DPhysxCapsule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxCapsule::InternalSwap(U3DPhysxCapsule* other) {
  std::swap(pos_, other->pos_);
  std::swap(rotation_, other->rotation_);
  std::swap(raduis_, other->raduis_);
  std::swap(height_, other->height_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxCapsule::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxCapsule

// optional int32 id = 1;
bool U3DPhysxCapsule::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void U3DPhysxCapsule::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void U3DPhysxCapsule::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void U3DPhysxCapsule::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 U3DPhysxCapsule::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.id)
  return id_;
}
void U3DPhysxCapsule::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.id)
}

// optional .killer.proto.ColliderType type = 2;
bool U3DPhysxCapsule::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void U3DPhysxCapsule::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void U3DPhysxCapsule::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void U3DPhysxCapsule::clear_type() {
  type_ = 1;
  clear_has_type();
}
::killer::proto::ColliderType U3DPhysxCapsule::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
void U3DPhysxCapsule::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.type)
}

// optional .killer.proto.Vector3 pos = 3;
bool U3DPhysxCapsule::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void U3DPhysxCapsule::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void U3DPhysxCapsule::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void U3DPhysxCapsule::clear_pos() {
  if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
  clear_has_pos();
}
const ::killer::proto::Vector3& U3DPhysxCapsule::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.pos)
  return pos_ != NULL ? *pos_
                         : *::killer::proto::Vector3::internal_default_instance();
}
::killer::proto::Vector3* U3DPhysxCapsule::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxCapsule.pos)
  return pos_;
}
::killer::proto::Vector3* U3DPhysxCapsule::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxCapsule.pos)
  clear_has_pos();
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
void U3DPhysxCapsule::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxCapsule.pos)
}

// optional double raduis = 4;
bool U3DPhysxCapsule::has_raduis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void U3DPhysxCapsule::set_has_raduis() {
  _has_bits_[0] |= 0x00000004u;
}
void U3DPhysxCapsule::clear_has_raduis() {
  _has_bits_[0] &= ~0x00000004u;
}
void U3DPhysxCapsule::clear_raduis() {
  raduis_ = 0;
  clear_has_raduis();
}
double U3DPhysxCapsule::raduis() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.raduis)
  return raduis_;
}
void U3DPhysxCapsule::set_raduis(double value) {
  set_has_raduis();
  raduis_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.raduis)
}

// optional double height = 5;
bool U3DPhysxCapsule::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void U3DPhysxCapsule::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void U3DPhysxCapsule::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void U3DPhysxCapsule::clear_height() {
  height_ = 0;
  clear_has_height();
}
double U3DPhysxCapsule::height() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.height)
  return height_;
}
void U3DPhysxCapsule::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.height)
}

// optional .killer.proto.Vector4 rotation = 6;
bool U3DPhysxCapsule::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void U3DPhysxCapsule::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
void U3DPhysxCapsule::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
void U3DPhysxCapsule::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
const ::killer::proto::Vector4& U3DPhysxCapsule::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
::killer::proto::Vector4* U3DPhysxCapsule::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxCapsule.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxCapsule::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxCapsule.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxCapsule::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxCapsule.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxMesh::kIdFieldNumber;
const int U3DPhysxMesh::kTypeFieldNumber;
const int U3DPhysxMesh::kVertexCountFieldNumber;
const int U3DPhysxMesh::kVerticesFieldNumber;
const int U3DPhysxMesh::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxMesh::U3DPhysxMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Scene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxMesh)
}
U3DPhysxMesh::U3DPhysxMesh(const U3DPhysxMesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxMesh)
}

void U3DPhysxMesh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rotation_, 0, reinterpret_cast<char*>(&vertex_count_) -
    reinterpret_cast<char*>(&rotation_) + sizeof(vertex_count_));
  type_ = 1;
}

U3DPhysxMesh::~U3DPhysxMesh() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxMesh)
  SharedDtor();
}

void U3DPhysxMesh::SharedDtor() {
  if (this != internal_default_instance()) {
    delete rotation_;
  }
}

void U3DPhysxMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxMesh::descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[6].descriptor;
}

const U3DPhysxMesh& U3DPhysxMesh::default_instance() {
  protobuf_Scene_2eproto::InitDefaults();
  return *internal_default_instance();
}

U3DPhysxMesh* U3DPhysxMesh::New(::google::protobuf::Arena* arena) const {
  U3DPhysxMesh* n = new U3DPhysxMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxMesh)
  vertices_.Clear();
  if (has_rotation()) {
    GOOGLE_DCHECK(rotation_ != NULL);
    rotation_->::killer::proto::Vector4::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&vertex_count_) -
      reinterpret_cast<char*>(&id_) + sizeof(vertex_count_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vertex_count = 3;
      case 3: {
        if (tag == 24u) {
          set_has_vertex_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.Vector3 vertices = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxMesh)
  return false;
#undef DO_
}

void U3DPhysxMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxMesh)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 vertex_count = 3;
  if (has_vertex_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertex_count(), output);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vertices(i), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxMesh)
}

::google::protobuf::uint8* U3DPhysxMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxMesh)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 vertex_count = 3;
  if (has_vertex_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertex_count(), target);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->vertices(i), false, target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->rotation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxMesh)
  return target;
}

size_t U3DPhysxMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxMesh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .killer.proto.Vector3 vertices = 4;
  {
    unsigned int count = this->vertices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertices(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .killer.proto.Vector4 rotation = 5;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 vertex_count = 3;
    if (has_vertex_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertex_count());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxMesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxMesh)
    MergeFrom(*source);
  }
}

void U3DPhysxMesh::MergeFrom(const U3DPhysxMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vertices_.MergeFrom(from.vertices_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_vertex_count()) {
      set_vertex_count(from.vertex_count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void U3DPhysxMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxMesh::CopyFrom(const U3DPhysxMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxMesh::IsInitialized() const {
  return true;
}

void U3DPhysxMesh::Swap(U3DPhysxMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxMesh::InternalSwap(U3DPhysxMesh* other) {
  vertices_.UnsafeArenaSwap(&other->vertices_);
  std::swap(rotation_, other->rotation_);
  std::swap(id_, other->id_);
  std::swap(vertex_count_, other->vertex_count_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxMesh::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxMesh

// optional int32 id = 1;
bool U3DPhysxMesh::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void U3DPhysxMesh::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void U3DPhysxMesh::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void U3DPhysxMesh::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 U3DPhysxMesh::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.id)
  return id_;
}
void U3DPhysxMesh::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.id)
}

// optional .killer.proto.ColliderType type = 2;
bool U3DPhysxMesh::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void U3DPhysxMesh::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void U3DPhysxMesh::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void U3DPhysxMesh::clear_type() {
  type_ = 1;
  clear_has_type();
}
::killer::proto::ColliderType U3DPhysxMesh::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
void U3DPhysxMesh::set_type(::killer::proto::ColliderType value) {
  assert(::killer::proto::ColliderType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.type)
}

// optional int32 vertex_count = 3;
bool U3DPhysxMesh::has_vertex_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void U3DPhysxMesh::set_has_vertex_count() {
  _has_bits_[0] |= 0x00000004u;
}
void U3DPhysxMesh::clear_has_vertex_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void U3DPhysxMesh::clear_vertex_count() {
  vertex_count_ = 0;
  clear_has_vertex_count();
}
::google::protobuf::int32 U3DPhysxMesh::vertex_count() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.vertex_count)
  return vertex_count_;
}
void U3DPhysxMesh::set_vertex_count(::google::protobuf::int32 value) {
  set_has_vertex_count();
  vertex_count_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.vertex_count)
}

// repeated .killer.proto.Vector3 vertices = 4;
int U3DPhysxMesh::vertices_size() const {
  return vertices_.size();
}
void U3DPhysxMesh::clear_vertices() {
  vertices_.Clear();
}
const ::killer::proto::Vector3& U3DPhysxMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Get(index);
}
::killer::proto::Vector3* U3DPhysxMesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Mutable(index);
}
::killer::proto::Vector3* U3DPhysxMesh::add_vertices() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >*
U3DPhysxMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxMesh.vertices)
  return &vertices_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >&
U3DPhysxMesh::vertices() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxMesh.vertices)
  return vertices_;
}

// optional .killer.proto.Vector4 rotation = 5;
bool U3DPhysxMesh::has_rotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void U3DPhysxMesh::set_has_rotation() {
  _has_bits_[0] |= 0x00000001u;
}
void U3DPhysxMesh::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000001u;
}
void U3DPhysxMesh::clear_rotation() {
  if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
  clear_has_rotation();
}
const ::killer::proto::Vector4& U3DPhysxMesh::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::killer::proto::Vector4::internal_default_instance();
}
::killer::proto::Vector4* U3DPhysxMesh::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxMesh.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxMesh::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxMesh.rotation)
  clear_has_rotation();
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxMesh::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxMesh.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace killer

// @@protoc_insertion_point(global_scope)
